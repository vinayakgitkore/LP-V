Cuda ADD VEctors
#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>

__global__ void addVectors(int* A, int* B, int* C, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        C[i] = A[i] + B[i];
    }
}

int main() {
    int n = 10; // Size of the vectors
    int* A, * B, * C;
    int size = n * sizeof(int);

    // Allocate memory on the host
    cudaMallocHost(&A, size);
    cudaMallocHost(&B, size);
    cudaMallocHost(&C, size);

    // Initialize vectors A and B with random values between 0 and 1000
    srand(time(0));
    std::cout << "Vector A:" << std::endl;
    for (int i = 0; i < n; ++i) {
        A[i] = rand() % 1001; // Random number between 0 and 1000
        std::cout << A[i] << " ";
    }
    std::cout << std::endl;

    std::cout << "Vector B:" << std::endl;
    for (int i = 0; i < n; ++i) {
        B[i] = rand() % 1001; // Random number between 0 and 1000
        std::cout << B[i] << " ";
    }
    std::cout << std::endl;

    // Allocate memory on the device
    int* dev_A, * dev_B, * dev_C;
    cudaMalloc(&dev_A, size);
    cudaMalloc(&dev_B, size);
    cudaMalloc(&dev_C, size);

    // Copy data from host to device
    cudaMemcpy(dev_A, A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(dev_B, B, size, cudaMemcpyHostToDevice);

    // Launch the kernel
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    addVectors<<<numBlocks, blockSize>>>(dev_A, dev_B, dev_C, n);

    // Copy data from device to host
    cudaMemcpy(C, dev_C, size, cudaMemcpyDeviceToHost);

    // Print the sum
    std::cout << "Sum:" << std::endl;
    for (int i = 0; i < n; i++) {
        std::cout << C[i] << " ";
    }
    std::cout << std::endl;

    // Free memory
    cudaFree(dev_A);
    cudaFree(dev_B);
    cudaFree(dev_C);
    cudaFreeHost(A);
    cudaFreeHost(B);
    cudaFreeHost(C);

    return 0;
}

